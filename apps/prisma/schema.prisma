generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL") 
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
    BLOCKED
}

enum ConversationRole {
    OWNER
    ADMIN
    MEMBER
}

model User {
    id                   String                    @id @default(cuid())
    email                String                    @unique
    hashedPassword       String
    name                 String?
    image                String?
    createdAt            DateTime                  @default(now())
    updatedAt            DateTime                  @updatedAt
    profile              Profile?
    participants         ConversationParticipant[]
    sentMessages         Message[]                 @relation("sentMessages")
    requestedFriendships Friendship[]              @relation("requested")
    receivedFriendships  Friendship[]              @relation("received")
    lastSeenAt           DateTime?                 @db.Timestamptz(6)
    Conversation         Conversation[]

    @@index([lastSeenAt])
}

model Friendship {
    id          String           @id @default(cuid())
    requester   User             @relation("requested", fields: [requesterId], references: [id])
    requesterId String
    addressee   User             @relation("received", fields: [addresseeId], references: [id])
    addresseeId String
    status      FriendshipStatus @default(PENDING)
    createdAt   DateTime         @default(now())

    @@unique([requesterId, addresseeId])
}

model Profile {
    id          String  @id @default(cuid())
    userId      String  @unique
    displayName String?
    avatarUrl   String?
    bio         String? @db.Text

    user User @relation(fields: [userId], references: [id])
}

model Conversation {
    id        String   @id @default(cuid())
    isGroup   Boolean  @default(false)
    title     String?
    avatarUrl String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // who created the group
    createdById String?
    createdBy   User?   @relation(fields: [createdById], references: [id])

    participants ConversationParticipant[]
    messages     Message[]
}

model ConversationParticipant {
    id             String           @id @default(cuid())
    conversation   Conversation     @relation(fields: [conversationId], references: [id])
    conversationId String
    user           User             @relation(fields: [userId], references: [id])
    userId         String
    joinedAt       DateTime         @default(now())
    role           ConversationRole @default(MEMBER)

    @@unique([conversationId, userId])
}

model Message {
    id             String       @id @default(cuid())
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    conversationId String
    sender         User         @relation("sentMessages", fields: [senderId], references: [id])
    senderId       String
    content        String
    imageUrl       String?
    createdAt      DateTime     @default(now())
}
